@page "/edit/{id:int}"
@inject ICarroService CarroService
@inject NavigationManager NavigationManager

<PageTitle>Editar Carro</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h3 class="mb-4">Editar Carro</h3>

            @if (loading)
            {
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Carregando...</span>
                        </div>
                    </div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(MensagemSucesso))
                {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @MensagemSucesso
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                }

                    <EditForm Model="carro" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Modelo</label>
                            <InputText class="form-control" @bind-Value="carro.Modelo" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Preço</label>
                            <InputNumber class="form-control" @bind-Value="carro.Preco" />
                        </div>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                                <div class="alert alert-danger">@ErrorMessage</div>
                    }

                        <button type="submit" class="btn btn-primary w-100" disabled="@saving">
                        @(saving ? "Salvando..." : "Salvar")
                        </button>
                    </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private Carro carro = new();
    private bool loading = true;
    private bool saving = false;
    private string MensagemSucesso;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        carro = await CarroService.GetCarroById(id);
        loading = false;
    }

    private async Task HandleValidSubmit()
    {
        ErrorMessage = string.Empty;
        MensagemSucesso = string.Empty;

        if (carro.Preco < 0)
        {
            ErrorMessage = "O preço não pode ser negativo.";
            return;
        }

        saving = true;
        await CarroService.UpdateCarro(carro);
        saving = false;

        MensagemSucesso = "Carro atualizado com sucesso!";
    }
}
